/* This C header file is generated by NIT to compile modules and programs that requires list. */
#ifndef list_sep
#define list_sep
#include "abstract_collection._sep.h"
#include <nit_common.h>

extern const classtable_elt_t VFT_List[];

extern const classtable_elt_t VFT_ListIterator[];

extern const classtable_elt_t VFT_ListNode[];
extern const char *LOCATE_list;
extern const int SFT_list[];
#define ID_List (SFT_list[0])
#define COLOR_List (SFT_list[1])
#define ATTR_list___List____head(recv) ATTR(recv, (SFT_list[2] + 0))
#define ATTR_list___List____tail(recv) ATTR(recv, (SFT_list[2] + 1))
#define INIT_TABLE_POS_List (SFT_list[3] + 0)
#define CALL_list___List___link(recv) ((list___List___link_t)CALL((recv), (SFT_list[3] + 1)))
#define CALL_list___List___init(recv) ((list___List___init_t)CALL((recv), (SFT_list[3] + 2)))
#define CALL_list___List___from(recv) ((list___List___from_t)CALL((recv), (SFT_list[3] + 3)))
#define CALL_list___List___get_node(recv) ((list___List___get_node_t)CALL((recv), (SFT_list[3] + 4)))
#define CALL_list___List___search_node_after(recv) ((list___List___search_node_after_t)CALL((recv), (SFT_list[3] + 5)))
#define CALL_list___List___remove_node(recv) ((list___List___remove_node_t)CALL((recv), (SFT_list[3] + 6)))
#define CALL_list___List___insert_before(recv) ((list___List___insert_before_t)CALL((recv), (SFT_list[3] + 7)))
#define ID_ListIterator (SFT_list[4])
#define COLOR_ListIterator (SFT_list[5])
#define ATTR_list___ListIterator____list(recv) ATTR(recv, (SFT_list[6] + 0))
#define ATTR_list___ListIterator____node(recv) ATTR(recv, (SFT_list[6] + 1))
#define ATTR_list___ListIterator____index(recv) ATTR(recv, (SFT_list[6] + 2))
#define INIT_TABLE_POS_ListIterator (SFT_list[7] + 0)
#define CALL_list___ListIterator___item__eq(recv) ((list___ListIterator___item__eq_t)CALL((recv), (SFT_list[7] + 1)))
#define CALL_list___ListIterator___init(recv) ((list___ListIterator___init_t)CALL((recv), (SFT_list[7] + 2)))
#define CALL_list___ListIterator___delete(recv) ((list___ListIterator___delete_t)CALL((recv), (SFT_list[7] + 3)))
#define CALL_list___ListIterator___insert_before(recv) ((list___ListIterator___insert_before_t)CALL((recv), (SFT_list[7] + 4)))
#define ID_ListNode (SFT_list[8])
#define COLOR_ListNode (SFT_list[9])
#define ATTR_list___ListNode____next(recv) ATTR(recv, (SFT_list[10] + 0))
#define ATTR_list___ListNode____prev(recv) ATTR(recv, (SFT_list[10] + 1))
#define INIT_TABLE_POS_ListNode (SFT_list[11] + 0)
#define CALL_list___ListNode___init(recv) ((list___ListNode___init_t)CALL((recv), (SFT_list[11] + 1)))
#define CALL_list___ListNode___next(recv) ((list___ListNode___next_t)CALL((recv), (SFT_list[11] + 2)))
#define CALL_list___ListNode___next__eq(recv) ((list___ListNode___next__eq_t)CALL((recv), (SFT_list[11] + 3)))
#define CALL_list___ListNode___prev(recv) ((list___ListNode___prev_t)CALL((recv), (SFT_list[11] + 4)))
#define CALL_list___ListNode___prev__eq(recv) ((list___ListNode___prev__eq_t)CALL((recv), (SFT_list[11] + 5)))
static const char * const LOCATE_list___List_____bra = "list::List::(abstract_collection::MapRead::[])";
val_t list___List_____bra(val_t p0, val_t p1);
typedef val_t (*list___List_____bra_t)(val_t p0, val_t p1);
static const char * const LOCATE_list___List_____braeq = "list::List::(abstract_collection::Map::[]=)";
void list___List_____braeq(val_t p0, val_t p1, val_t p2);
typedef void (*list___List_____braeq_t)(val_t p0, val_t p1, val_t p2);
static const char * const LOCATE_list___List___first = "list::List::(abstract_collection::Collection::first)";
val_t list___List___first(val_t p0);
typedef val_t (*list___List___first_t)(val_t p0);
static const char * const LOCATE_list___List___first__eq = "list::List::(abstract_collection::Sequence::first=)";
void list___List___first__eq(val_t p0, val_t p1);
typedef void (*list___List___first__eq_t)(val_t p0, val_t p1);
static const char * const LOCATE_list___List___last = "list::List::(abstract_collection::SequenceRead::last)";
val_t list___List___last(val_t p0);
typedef val_t (*list___List___last_t)(val_t p0);
static const char * const LOCATE_list___List___last__eq = "list::List::(abstract_collection::Sequence::last=)";
void list___List___last__eq(val_t p0, val_t p1);
typedef void (*list___List___last__eq_t)(val_t p0, val_t p1);
static const char * const LOCATE_list___List___is_empty = "list::List::(abstract_collection::Collection::is_empty)";
val_t list___List___is_empty(val_t p0);
typedef val_t (*list___List___is_empty_t)(val_t p0);
static const char * const LOCATE_list___List___length = "list::List::(abstract_collection::Collection::length)";
val_t list___List___length(val_t p0);
typedef val_t (*list___List___length_t)(val_t p0);
static const char * const LOCATE_list___List___has = "list::List::(abstract_collection::Collection::has)";
val_t list___List___has(val_t p0, val_t p1);
typedef val_t (*list___List___has_t)(val_t p0, val_t p1);
static const char * const LOCATE_list___List___has_only = "list::List::(abstract_collection::Collection::has_only)";
val_t list___List___has_only(val_t p0, val_t p1);
typedef val_t (*list___List___has_only_t)(val_t p0, val_t p1);
static const char * const LOCATE_list___List___count = "list::List::(abstract_collection::Collection::count)";
val_t list___List___count(val_t p0, val_t p1);
typedef val_t (*list___List___count_t)(val_t p0, val_t p1);
static const char * const LOCATE_list___List___has_key = "list::List::(abstract_collection::MapRead::has_key)";
val_t list___List___has_key(val_t p0, val_t p1);
typedef val_t (*list___List___has_key_t)(val_t p0, val_t p1);
static const char * const LOCATE_list___List___push = "list::List::(abstract_collection::Sequence::push)";
void list___List___push(val_t p0, val_t p1);
typedef void (*list___List___push_t)(val_t p0, val_t p1);
static const char * const LOCATE_list___List___unshift = "list::List::(abstract_collection::Sequence::unshift)";
void list___List___unshift(val_t p0, val_t p1);
typedef void (*list___List___unshift_t)(val_t p0, val_t p1);
static const char * const LOCATE_list___List___link = "list::List::link";
void list___List___link(val_t p0, val_t p1);
typedef void (*list___List___link_t)(val_t p0, val_t p1);
static const char * const LOCATE_list___List___pop = "list::List::(abstract_collection::Sequence::pop)";
val_t list___List___pop(val_t p0);
typedef val_t (*list___List___pop_t)(val_t p0);
static const char * const LOCATE_list___List___shift = "list::List::(abstract_collection::Sequence::shift)";
val_t list___List___shift(val_t p0);
typedef val_t (*list___List___shift_t)(val_t p0);
static const char * const LOCATE_list___List___remove = "list::List::(abstract_collection::RemovableCollection::remove)";
void list___List___remove(val_t p0, val_t p1);
typedef void (*list___List___remove_t)(val_t p0, val_t p1);
static const char * const LOCATE_list___List___remove_at = "list::List::(abstract_collection::Map::remove_at)";
void list___List___remove_at(val_t p0, val_t p1);
typedef void (*list___List___remove_at_t)(val_t p0, val_t p1);
static const char * const LOCATE_list___List___clear = "list::List::(abstract_collection::RemovableCollection::clear)";
void list___List___clear(val_t p0);
typedef void (*list___List___clear_t)(val_t p0);
static const char * const LOCATE_list___List___iterator = "list::List::(abstract_collection::Collection::iterator)";
val_t list___List___iterator(val_t p0);
typedef val_t (*list___List___iterator_t)(val_t p0);
static const char * const LOCATE_list___List___init = "list::List::init";
void list___List___init(val_t p0, int* init_table);
typedef void (*list___List___init_t)(val_t p0, int* init_table);
val_t NEW_List_list___List___init();
static const char * const LOCATE_list___List___from = "list::List::from";
void list___List___from(val_t p0, val_t p1, int* init_table);
typedef void (*list___List___from_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_List_list___List___from(val_t p0);
static const char * const LOCATE_list___List___get_node = "list::List::get_node";
val_t list___List___get_node(val_t p0, val_t p1);
typedef val_t (*list___List___get_node_t)(val_t p0, val_t p1);
static const char * const LOCATE_list___List___search_node_after = "list::List::search_node_after";
val_t list___List___search_node_after(val_t p0, val_t p1, val_t p2);
typedef val_t (*list___List___search_node_after_t)(val_t p0, val_t p1, val_t p2);
static const char * const LOCATE_list___List___remove_node = "list::List::remove_node";
void list___List___remove_node(val_t p0, val_t p1);
typedef void (*list___List___remove_node_t)(val_t p0, val_t p1);
static const char * const LOCATE_list___List___insert_before = "list::List::insert_before";
void list___List___insert_before(val_t p0, val_t p1, val_t p2);
typedef void (*list___List___insert_before_t)(val_t p0, val_t p1, val_t p2);
static const char * const LOCATE_list___ListIterator___item = "list::ListIterator::(abstract_collection::Iterator::item)";
val_t list___ListIterator___item(val_t p0);
typedef val_t (*list___ListIterator___item_t)(val_t p0);
static const char * const LOCATE_list___ListIterator___item__eq = "list::ListIterator::item=";
void list___ListIterator___item__eq(val_t p0, val_t p1);
typedef void (*list___ListIterator___item__eq_t)(val_t p0, val_t p1);
static const char * const LOCATE_list___ListIterator___is_ok = "list::ListIterator::(abstract_collection::Iterator::is_ok)";
val_t list___ListIterator___is_ok(val_t p0);
typedef val_t (*list___ListIterator___is_ok_t)(val_t p0);
static const char * const LOCATE_list___ListIterator___next = "list::ListIterator::(abstract_collection::Iterator::next)";
void list___ListIterator___next(val_t p0);
typedef void (*list___ListIterator___next_t)(val_t p0);
static const char * const LOCATE_list___ListIterator___init = "list::ListIterator::init";
void list___ListIterator___init(val_t p0, val_t p1, int* init_table);
typedef void (*list___ListIterator___init_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_ListIterator_list___ListIterator___init(val_t p0);
static const char * const LOCATE_list___ListIterator___index = "list::ListIterator::(abstract_collection::IndexedIterator::index)";
val_t list___ListIterator___index(val_t p0);
typedef val_t (*list___ListIterator___index_t)(val_t p0);
static const char * const LOCATE_list___ListIterator___delete = "list::ListIterator::delete";
void list___ListIterator___delete(val_t p0);
typedef void (*list___ListIterator___delete_t)(val_t p0);
static const char * const LOCATE_list___ListIterator___insert_before = "list::ListIterator::insert_before";
void list___ListIterator___insert_before(val_t p0, val_t p1);
typedef void (*list___ListIterator___insert_before_t)(val_t p0, val_t p1);
static const char * const LOCATE_list___ListNode___init = "list::ListNode::init";
void list___ListNode___init(val_t p0, val_t p1, int* init_table);
typedef void (*list___ListNode___init_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_ListNode_list___ListNode___init(val_t p0);
static const char * const LOCATE_list___ListNode___next = "list::ListNode::next";
val_t list___ListNode___next(val_t p0);
typedef val_t (*list___ListNode___next_t)(val_t p0);
static const char * const LOCATE_list___ListNode___next__eq = "list::ListNode::next=";
void list___ListNode___next__eq(val_t p0, val_t p1);
typedef void (*list___ListNode___next__eq_t)(val_t p0, val_t p1);
static const char * const LOCATE_list___ListNode___prev = "list::ListNode::prev";
val_t list___ListNode___prev(val_t p0);
typedef val_t (*list___ListNode___prev_t)(val_t p0);
static const char * const LOCATE_list___ListNode___prev__eq = "list::ListNode::prev=";
void list___ListNode___prev__eq(val_t p0, val_t p1);
typedef void (*list___ListNode___prev__eq_t)(val_t p0, val_t p1);
#endif
