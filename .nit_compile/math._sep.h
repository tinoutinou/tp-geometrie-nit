/* This C header file is generated by NIT to compile modules and programs that requires math. */
#ifndef math_sep
#define math_sep
#include "kernel._sep.h"
#include <nit_common.h>
#include <math_nit.h>
extern const char *LOCATE_math;
extern const int SFT_math[];
#define CALL_math___Int___rand(recv) ((math___Int___rand_t)CALL((recv), (SFT_math[0] + 0)))
#define CALL_math___Float___sqrt(recv) ((math___Float___sqrt_t)CALL((recv), (SFT_math[1] + 0)))
#define CALL_math___Float___cos(recv) ((math___Float___cos_t)CALL((recv), (SFT_math[1] + 1)))
#define CALL_math___Float___sin(recv) ((math___Float___sin_t)CALL((recv), (SFT_math[1] + 2)))
#define CALL_math___Float___tan(recv) ((math___Float___tan_t)CALL((recv), (SFT_math[1] + 3)))
#define CALL_math___Float___acos(recv) ((math___Float___acos_t)CALL((recv), (SFT_math[1] + 4)))
#define CALL_math___Float___asin(recv) ((math___Float___asin_t)CALL((recv), (SFT_math[1] + 5)))
#define CALL_math___Float___atan(recv) ((math___Float___atan_t)CALL((recv), (SFT_math[1] + 6)))
#define CALL_math___Float___pow(recv) ((math___Float___pow_t)CALL((recv), (SFT_math[1] + 7)))
#define CALL_math___Float___log(recv) ((math___Float___log_t)CALL((recv), (SFT_math[1] + 8)))
#define CALL_math___Float___exp(recv) ((math___Float___exp_t)CALL((recv), (SFT_math[1] + 9)))
#define CALL_math___Float___rand(recv) ((math___Float___rand_t)CALL((recv), (SFT_math[1] + 10)))
#define CALL_math___Object___atan2(recv) ((math___Object___atan2_t)CALL((recv), (SFT_math[2] + 0)))
#define CALL_math___Object___pi(recv) ((math___Object___pi_t)CALL((recv), (SFT_math[2] + 1)))
#define CALL_math___Object___srand_from(recv) ((math___Object___srand_from_t)CALL((recv), (SFT_math[2] + 2)))
#define CALL_math___Object___srand(recv) ((math___Object___srand_t)CALL((recv), (SFT_math[2] + 3)))
static const char * const LOCATE_math___Int___rand = "math::Int::rand";
val_t math___Int___rand(val_t p0);
typedef val_t (*math___Int___rand_t)(val_t p0);
static const char * const LOCATE_math___Float___sqrt = "math::Float::sqrt";
val_t math___Float___sqrt(val_t p0);
typedef val_t (*math___Float___sqrt_t)(val_t p0);
static const char * const LOCATE_math___Float___cos = "math::Float::cos";
val_t math___Float___cos(val_t p0);
typedef val_t (*math___Float___cos_t)(val_t p0);
static const char * const LOCATE_math___Float___sin = "math::Float::sin";
val_t math___Float___sin(val_t p0);
typedef val_t (*math___Float___sin_t)(val_t p0);
static const char * const LOCATE_math___Float___tan = "math::Float::tan";
val_t math___Float___tan(val_t p0);
typedef val_t (*math___Float___tan_t)(val_t p0);
static const char * const LOCATE_math___Float___acos = "math::Float::acos";
val_t math___Float___acos(val_t p0);
typedef val_t (*math___Float___acos_t)(val_t p0);
static const char * const LOCATE_math___Float___asin = "math::Float::asin";
val_t math___Float___asin(val_t p0);
typedef val_t (*math___Float___asin_t)(val_t p0);
static const char * const LOCATE_math___Float___atan = "math::Float::atan";
val_t math___Float___atan(val_t p0);
typedef val_t (*math___Float___atan_t)(val_t p0);
static const char * const LOCATE_math___Float___pow = "math::Float::pow";
val_t math___Float___pow(val_t p0, val_t p1);
typedef val_t (*math___Float___pow_t)(val_t p0, val_t p1);
static const char * const LOCATE_math___Float___log = "math::Float::log";
val_t math___Float___log(val_t p0);
typedef val_t (*math___Float___log_t)(val_t p0);
static const char * const LOCATE_math___Float___exp = "math::Float::exp";
val_t math___Float___exp(val_t p0);
typedef val_t (*math___Float___exp_t)(val_t p0);
static const char * const LOCATE_math___Float___rand = "math::Float::rand";
val_t math___Float___rand(val_t p0);
typedef val_t (*math___Float___rand_t)(val_t p0);
static const char * const LOCATE_math___Object___atan2 = "math::Object::atan2";
val_t math___Object___atan2(val_t p0, val_t p1, val_t p2);
typedef val_t (*math___Object___atan2_t)(val_t p0, val_t p1, val_t p2);
static const char * const LOCATE_math___Object___pi = "math::Object::pi";
val_t math___Object___pi(val_t p0);
typedef val_t (*math___Object___pi_t)(val_t p0);
static const char * const LOCATE_math___Object___srand_from = "math::Object::srand_from";
void math___Object___srand_from(val_t p0, val_t p1);
typedef void (*math___Object___srand_from_t)(val_t p0, val_t p1);
static const char * const LOCATE_math___Object___srand = "math::Object::srand";
void math___Object___srand(val_t p0);
typedef void (*math___Object___srand_t)(val_t p0);
#endif
