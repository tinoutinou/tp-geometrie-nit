/* This C header file is generated by NIT to compile modules and programs that requires polygone. */
#ifndef polygone_sep
#define polygone_sep
#include "figure._sep.h"
#include <nit_common.h>

extern const classtable_elt_t VFT_Polygone[];

extern const classtable_elt_t VFT_Triangle[];

extern const classtable_elt_t VFT_Quadrilatere[];

extern const classtable_elt_t VFT_Parallelogramme[];

extern const classtable_elt_t VFT_Losange[];

extern const classtable_elt_t VFT_Rectangle[];

extern const classtable_elt_t VFT_Carre[];
extern const char *LOCATE_polygone;
extern const int SFT_polygone[];
#define ID_Polygone (SFT_polygone[0])
#define COLOR_Polygone (SFT_polygone[1])
#define ATTR_polygone___Polygone____sommets(recv) ATTR(recv, (SFT_polygone[2] + 0))
#define INIT_TABLE_POS_Polygone (SFT_polygone[3] + 0)
#define CALL_polygone___Polygone___sommets(recv) ((polygone___Polygone___sommets_t)CALL((recv), (SFT_polygone[3] + 1)))
#define CALL_polygone___Polygone___init(recv) ((polygone___Polygone___init_t)CALL((recv), (SFT_polygone[3] + 2)))
#define CALL_polygone___Polygone___cotes(recv) ((polygone___Polygone___cotes_t)CALL((recv), (SFT_polygone[3] + 3)))
#define ID_Triangle (SFT_polygone[4])
#define COLOR_Triangle (SFT_polygone[5])
#define INIT_TABLE_POS_Triangle (SFT_polygone[6] + 0)
#define CALL_polygone___Triangle___init(recv) ((polygone___Triangle___init_t)CALL((recv), (SFT_polygone[6] + 1)))
#define CALL_SUPER_polygone___Triangle_____eqeq(recv) ((polygone___Triangle_____eqeq_t)CALL((recv), (SFT_polygone[6] + 2)))
#define CALL_SUPER_polygone___Triangle___to_s(recv) ((polygone___Triangle___to_s_t)CALL((recv), (SFT_polygone[6] + 3)))
#define ID_Quadrilatere (SFT_polygone[7])
#define COLOR_Quadrilatere (SFT_polygone[8])
#define INIT_TABLE_POS_Quadrilatere (SFT_polygone[9] + 0)
#define CALL_polygone___Quadrilatere___init(recv) ((polygone___Quadrilatere___init_t)CALL((recv), (SFT_polygone[9] + 1)))
#define CALL_polygone___Quadrilatere___diagonales(recv) ((polygone___Quadrilatere___diagonales_t)CALL((recv), (SFT_polygone[9] + 2)))
#define CALL_SUPER_polygone___Quadrilatere_____eqeq(recv) ((polygone___Quadrilatere_____eqeq_t)CALL((recv), (SFT_polygone[9] + 3)))
#define CALL_SUPER_polygone___Quadrilatere___to_s(recv) ((polygone___Quadrilatere___to_s_t)CALL((recv), (SFT_polygone[9] + 4)))
#define ID_Parallelogramme (SFT_polygone[10])
#define COLOR_Parallelogramme (SFT_polygone[11])
#define INIT_TABLE_POS_Parallelogramme (SFT_polygone[12] + 0)
#define CALL_polygone___Parallelogramme___init(recv) ((polygone___Parallelogramme___init_t)CALL((recv), (SFT_polygone[12] + 1)))
#define CALL_SUPER_polygone___Parallelogramme_____eqeq(recv) ((polygone___Parallelogramme_____eqeq_t)CALL((recv), (SFT_polygone[12] + 2)))
#define CALL_SUPER_polygone___Parallelogramme___to_s(recv) ((polygone___Parallelogramme___to_s_t)CALL((recv), (SFT_polygone[12] + 3)))
#define ID_Losange (SFT_polygone[13])
#define COLOR_Losange (SFT_polygone[14])
#define INIT_TABLE_POS_Losange (SFT_polygone[15] + 0)
#define CALL_polygone___Losange___init(recv) ((polygone___Losange___init_t)CALL((recv), (SFT_polygone[15] + 1)))
#define CALL_polygone___Losange___rectangleInscrit(recv) ((polygone___Losange___rectangleInscrit_t)CALL((recv), (SFT_polygone[15] + 2)))
#define CALL_polygone___Losange___cercleInscrit(recv) ((polygone___Losange___cercleInscrit_t)CALL((recv), (SFT_polygone[15] + 3)))
#define CALL_SUPER_polygone___Losange_____eqeq(recv) ((polygone___Losange_____eqeq_t)CALL((recv), (SFT_polygone[15] + 4)))
#define CALL_SUPER_polygone___Losange___to_s(recv) ((polygone___Losange___to_s_t)CALL((recv), (SFT_polygone[15] + 5)))
#define ID_Rectangle (SFT_polygone[16])
#define COLOR_Rectangle (SFT_polygone[17])
#define INIT_TABLE_POS_Rectangle (SFT_polygone[18] + 0)
#define CALL_polygone___Rectangle___init(recv) ((polygone___Rectangle___init_t)CALL((recv), (SFT_polygone[18] + 1)))
#define CALL_polygone___Rectangle___cercleCirconscrit(recv) ((polygone___Rectangle___cercleCirconscrit_t)CALL((recv), (SFT_polygone[18] + 2)))
#define CALL_polygone___Rectangle___losangeInscrit(recv) ((polygone___Rectangle___losangeInscrit_t)CALL((recv), (SFT_polygone[18] + 3)))
#define CALL_SUPER_polygone___Rectangle_____eqeq(recv) ((polygone___Rectangle_____eqeq_t)CALL((recv), (SFT_polygone[18] + 4)))
#define CALL_SUPER_polygone___Rectangle___to_s(recv) ((polygone___Rectangle___to_s_t)CALL((recv), (SFT_polygone[18] + 5)))
#define ID_Carre (SFT_polygone[19])
#define COLOR_Carre (SFT_polygone[20])
#define INIT_TABLE_POS_Carre (SFT_polygone[21] + 0)
#define CALL_polygone___Carre___init(recv) ((polygone___Carre___init_t)CALL((recv), (SFT_polygone[21] + 1)))
#define CALL_SUPER_polygone___Carre_____eqeq(recv) ((polygone___Carre_____eqeq_t)CALL((recv), (SFT_polygone[21] + 2)))
#define CALL_SUPER_polygone___Carre___to_s(recv) ((polygone___Carre___to_s_t)CALL((recv), (SFT_polygone[21] + 3)))
static const char * const LOCATE_polygone___Polygone___sommets = "polygone::Polygone::sommets";
val_t polygone___Polygone___sommets(val_t p0);
typedef val_t (*polygone___Polygone___sommets_t)(val_t p0);
static const char * const LOCATE_polygone___Polygone___init = "polygone::Polygone::init";
void polygone___Polygone___init(val_t p0, val_t p1, int* init_table);
typedef void (*polygone___Polygone___init_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_Polygone_polygone___Polygone___init(val_t p0);
static const char * const LOCATE_polygone___Polygone___cotes = "polygone::Polygone::cotes";
val_t polygone___Polygone___cotes(val_t p0);
typedef val_t (*polygone___Polygone___cotes_t)(val_t p0);
static const char * const LOCATE_polygone___Polygone___aire = "polygone::Polygone::(figure::Figure::aire)";
val_t polygone___Polygone___aire(val_t p0);
typedef val_t (*polygone___Polygone___aire_t)(val_t p0);
static const char * const LOCATE_polygone___Polygone___perimetre = "polygone::Polygone::(figure::Figure::perimetre)";
val_t polygone___Polygone___perimetre(val_t p0);
typedef val_t (*polygone___Polygone___perimetre_t)(val_t p0);
static const char * const LOCATE_polygone___Polygone_____eqeq = "polygone::Polygone::(kernel::Object::==)";
val_t polygone___Polygone_____eqeq(val_t p0, val_t p1);
typedef val_t (*polygone___Polygone_____eqeq_t)(val_t p0, val_t p1);
static const char * const LOCATE_polygone___Polygone___to_s = "polygone::Polygone::(string::Object::to_s)";
val_t polygone___Polygone___to_s(val_t p0);
typedef val_t (*polygone___Polygone___to_s_t)(val_t p0);
static const char * const LOCATE_polygone___Triangle___init = "polygone::Triangle::init";
void polygone___Triangle___init(val_t p0, val_t p1, int* init_table);
typedef void (*polygone___Triangle___init_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_Triangle_polygone___Triangle___init(val_t p0);
static const char * const LOCATE_polygone___Triangle___aire = "polygone::Triangle::(figure::Figure::aire)";
val_t polygone___Triangle___aire(val_t p0);
typedef val_t (*polygone___Triangle___aire_t)(val_t p0);
static const char * const LOCATE_polygone___Triangle_____eqeq = "polygone::Triangle::(kernel::Object::==)";
val_t polygone___Triangle_____eqeq(val_t p0, val_t p1);
typedef val_t (*polygone___Triangle_____eqeq_t)(val_t p0, val_t p1);
static const char * const LOCATE_polygone___Triangle___to_s = "polygone::Triangle::(string::Object::to_s)";
val_t polygone___Triangle___to_s(val_t p0);
typedef val_t (*polygone___Triangle___to_s_t)(val_t p0);
static const char * const LOCATE_polygone___Quadrilatere___init = "polygone::Quadrilatere::init";
void polygone___Quadrilatere___init(val_t p0, val_t p1, int* init_table);
typedef void (*polygone___Quadrilatere___init_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_Quadrilatere_polygone___Quadrilatere___init(val_t p0);
static const char * const LOCATE_polygone___Quadrilatere___diagonales = "polygone::Quadrilatere::diagonales";
val_t polygone___Quadrilatere___diagonales(val_t p0);
typedef val_t (*polygone___Quadrilatere___diagonales_t)(val_t p0);
static const char * const LOCATE_polygone___Quadrilatere_____eqeq = "polygone::Quadrilatere::(kernel::Object::==)";
val_t polygone___Quadrilatere_____eqeq(val_t p0, val_t p1);
typedef val_t (*polygone___Quadrilatere_____eqeq_t)(val_t p0, val_t p1);
static const char * const LOCATE_polygone___Quadrilatere___to_s = "polygone::Quadrilatere::(string::Object::to_s)";
val_t polygone___Quadrilatere___to_s(val_t p0);
typedef val_t (*polygone___Quadrilatere___to_s_t)(val_t p0);
static const char * const LOCATE_polygone___Parallelogramme___init = "polygone::Parallelogramme::init";
void polygone___Parallelogramme___init(val_t p0, val_t p1, int* init_table);
typedef void (*polygone___Parallelogramme___init_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_Parallelogramme_polygone___Parallelogramme___init(val_t p0);
static const char * const LOCATE_polygone___Parallelogramme___aire = "polygone::Parallelogramme::(figure::Figure::aire)";
val_t polygone___Parallelogramme___aire(val_t p0);
typedef val_t (*polygone___Parallelogramme___aire_t)(val_t p0);
static const char * const LOCATE_polygone___Parallelogramme_____eqeq = "polygone::Parallelogramme::(kernel::Object::==)";
val_t polygone___Parallelogramme_____eqeq(val_t p0, val_t p1);
typedef val_t (*polygone___Parallelogramme_____eqeq_t)(val_t p0, val_t p1);
static const char * const LOCATE_polygone___Parallelogramme___to_s = "polygone::Parallelogramme::(string::Object::to_s)";
val_t polygone___Parallelogramme___to_s(val_t p0);
typedef val_t (*polygone___Parallelogramme___to_s_t)(val_t p0);
static const char * const LOCATE_polygone___Losange___init = "polygone::Losange::init";
void polygone___Losange___init(val_t p0, val_t p1, int* init_table);
typedef void (*polygone___Losange___init_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_Losange_polygone___Losange___init(val_t p0);
static const char * const LOCATE_polygone___Losange___rectangleInscrit = "polygone::Losange::rectangleInscrit";
val_t polygone___Losange___rectangleInscrit(val_t p0);
typedef val_t (*polygone___Losange___rectangleInscrit_t)(val_t p0);
static const char * const LOCATE_polygone___Losange___cercleInscrit = "polygone::Losange::cercleInscrit";
val_t polygone___Losange___cercleInscrit(val_t p0);
typedef val_t (*polygone___Losange___cercleInscrit_t)(val_t p0);
static const char * const LOCATE_polygone___Losange___aire = "polygone::Losange::(figure::Figure::aire)";
val_t polygone___Losange___aire(val_t p0);
typedef val_t (*polygone___Losange___aire_t)(val_t p0);
static const char * const LOCATE_polygone___Losange_____eqeq = "polygone::Losange::(kernel::Object::==)";
val_t polygone___Losange_____eqeq(val_t p0, val_t p1);
typedef val_t (*polygone___Losange_____eqeq_t)(val_t p0, val_t p1);
static const char * const LOCATE_polygone___Losange___to_s = "polygone::Losange::(string::Object::to_s)";
val_t polygone___Losange___to_s(val_t p0);
typedef val_t (*polygone___Losange___to_s_t)(val_t p0);
static const char * const LOCATE_polygone___Rectangle___init = "polygone::Rectangle::init";
void polygone___Rectangle___init(val_t p0, val_t p1, int* init_table);
typedef void (*polygone___Rectangle___init_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_Rectangle_polygone___Rectangle___init(val_t p0);
static const char * const LOCATE_polygone___Rectangle___cercleCirconscrit = "polygone::Rectangle::cercleCirconscrit";
val_t polygone___Rectangle___cercleCirconscrit(val_t p0);
typedef val_t (*polygone___Rectangle___cercleCirconscrit_t)(val_t p0);
static const char * const LOCATE_polygone___Rectangle___losangeInscrit = "polygone::Rectangle::losangeInscrit";
val_t polygone___Rectangle___losangeInscrit(val_t p0);
typedef val_t (*polygone___Rectangle___losangeInscrit_t)(val_t p0);
static const char * const LOCATE_polygone___Rectangle___aire = "polygone::Rectangle::(figure::Figure::aire)";
val_t polygone___Rectangle___aire(val_t p0);
typedef val_t (*polygone___Rectangle___aire_t)(val_t p0);
static const char * const LOCATE_polygone___Rectangle_____eqeq = "polygone::Rectangle::(kernel::Object::==)";
val_t polygone___Rectangle_____eqeq(val_t p0, val_t p1);
typedef val_t (*polygone___Rectangle_____eqeq_t)(val_t p0, val_t p1);
static const char * const LOCATE_polygone___Rectangle___to_s = "polygone::Rectangle::(string::Object::to_s)";
val_t polygone___Rectangle___to_s(val_t p0);
typedef val_t (*polygone___Rectangle___to_s_t)(val_t p0);
static const char * const LOCATE_polygone___Carre___init = "polygone::Carre::init";
void polygone___Carre___init(val_t p0, val_t p1, int* init_table);
typedef void (*polygone___Carre___init_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_Carre_polygone___Carre___init(val_t p0);
static const char * const LOCATE_polygone___Carre_____eqeq = "polygone::Carre::(kernel::Object::==)";
val_t polygone___Carre_____eqeq(val_t p0, val_t p1);
typedef val_t (*polygone___Carre_____eqeq_t)(val_t p0, val_t p1);
static const char * const LOCATE_polygone___Carre___aire = "polygone::Carre::(figure::Figure::aire)";
val_t polygone___Carre___aire(val_t p0);
typedef val_t (*polygone___Carre___aire_t)(val_t p0);
static const char * const LOCATE_polygone___Carre___to_s = "polygone::Carre::(string::Object::to_s)";
val_t polygone___Carre___to_s(val_t p0);
typedef val_t (*polygone___Carre___to_s_t)(val_t p0);
#endif
