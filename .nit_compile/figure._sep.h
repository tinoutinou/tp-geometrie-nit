/* This C header file is generated by NIT to compile modules and programs that requires figure. */
#ifndef figure_sep
#define figure_sep
#include "utils._sep.h"
#include <nit_common.h>

extern const classtable_elt_t VFT_Figure[];

extern const classtable_elt_t VFT_Point[];

extern const classtable_elt_t VFT_Segment[];

extern const classtable_elt_t VFT_Cercle[];
extern const char *LOCATE_figure;
extern const int SFT_figure[];
#define ID_Figure (SFT_figure[0])
#define COLOR_Figure (SFT_figure[1])
#define INIT_TABLE_POS_Figure (SFT_figure[2] + 0)
#define CALL_figure___Figure___aire(recv) ((figure___Figure___aire_t)CALL((recv), (SFT_figure[2] + 1)))
#define CALL_figure___Figure___perimetre(recv) ((figure___Figure___perimetre_t)CALL((recv), (SFT_figure[2] + 2)))
#define ID_Point (SFT_figure[3])
#define COLOR_Point (SFT_figure[4])
#define ATTR_figure___Point____x(recv) ATTR(recv, (SFT_figure[5] + 0))
#define ATTR_figure___Point____y(recv) ATTR(recv, (SFT_figure[5] + 1))
#define INIT_TABLE_POS_Point (SFT_figure[6] + 0)
#define CALL_figure___Point___x(recv) ((figure___Point___x_t)CALL((recv), (SFT_figure[6] + 1)))
#define CALL_figure___Point___y(recv) ((figure___Point___y_t)CALL((recv), (SFT_figure[6] + 2)))
#define CALL_figure___Point___init(recv) ((figure___Point___init_t)CALL((recv), (SFT_figure[6] + 3)))
#define ID_Segment (SFT_figure[7])
#define COLOR_Segment (SFT_figure[8])
#define ATTR_figure___Segment____sommets(recv) ATTR(recv, (SFT_figure[9] + 0))
#define INIT_TABLE_POS_Segment (SFT_figure[10] + 0)
#define CALL_figure___Segment___sommets(recv) ((figure___Segment___sommets_t)CALL((recv), (SFT_figure[10] + 1)))
#define CALL_figure___Segment___init(recv) ((figure___Segment___init_t)CALL((recv), (SFT_figure[10] + 2)))
#define CALL_figure___Segment___taille(recv) ((figure___Segment___taille_t)CALL((recv), (SFT_figure[10] + 3)))
#define CALL_figure___Segment___milieu(recv) ((figure___Segment___milieu_t)CALL((recv), (SFT_figure[10] + 4)))
#define ID_Cercle (SFT_figure[11])
#define COLOR_Cercle (SFT_figure[12])
#define ATTR_figure___Cercle____centre(recv) ATTR(recv, (SFT_figure[13] + 0))
#define ATTR_figure___Cercle____rayon(recv) ATTR(recv, (SFT_figure[13] + 1))
#define INIT_TABLE_POS_Cercle (SFT_figure[14] + 0)
#define CALL_figure___Cercle___centre(recv) ((figure___Cercle___centre_t)CALL((recv), (SFT_figure[14] + 1)))
#define CALL_figure___Cercle___rayon(recv) ((figure___Cercle___rayon_t)CALL((recv), (SFT_figure[14] + 2)))
#define CALL_figure___Cercle___init(recv) ((figure___Cercle___init_t)CALL((recv), (SFT_figure[14] + 3)))
static const char * const LOCATE_figure___Figure___aire = "figure::Figure::aire";
val_t figure___Figure___aire(val_t p0);
typedef val_t (*figure___Figure___aire_t)(val_t p0);
static const char * const LOCATE_figure___Figure___perimetre = "figure::Figure::perimetre";
val_t figure___Figure___perimetre(val_t p0);
typedef val_t (*figure___Figure___perimetre_t)(val_t p0);
static const char * const LOCATE_figure___Point___x = "figure::Point::x";
val_t figure___Point___x(val_t p0);
typedef val_t (*figure___Point___x_t)(val_t p0);
static const char * const LOCATE_figure___Point___y = "figure::Point::y";
val_t figure___Point___y(val_t p0);
typedef val_t (*figure___Point___y_t)(val_t p0);
static const char * const LOCATE_figure___Point___init = "figure::Point::init";
void figure___Point___init(val_t p0, val_t p1, val_t p2, int* init_table);
typedef void (*figure___Point___init_t)(val_t p0, val_t p1, val_t p2, int* init_table);
val_t NEW_Point_figure___Point___init(val_t p0, val_t p1);
static const char * const LOCATE_figure___Point___aire = "figure::Point::(figure::Figure::aire)";
val_t figure___Point___aire(val_t p0);
typedef val_t (*figure___Point___aire_t)(val_t p0);
static const char * const LOCATE_figure___Point___perimetre = "figure::Point::(figure::Figure::perimetre)";
val_t figure___Point___perimetre(val_t p0);
typedef val_t (*figure___Point___perimetre_t)(val_t p0);
static const char * const LOCATE_figure___Point_____eqeq = "figure::Point::(kernel::Object::==)";
val_t figure___Point_____eqeq(val_t p0, val_t p1);
typedef val_t (*figure___Point_____eqeq_t)(val_t p0, val_t p1);
static const char * const LOCATE_figure___Point___to_s = "figure::Point::(string::Object::to_s)";
val_t figure___Point___to_s(val_t p0);
typedef val_t (*figure___Point___to_s_t)(val_t p0);
static const char * const LOCATE_figure___Segment___sommets = "figure::Segment::sommets";
val_t figure___Segment___sommets(val_t p0);
typedef val_t (*figure___Segment___sommets_t)(val_t p0);
static const char * const LOCATE_figure___Segment___init = "figure::Segment::init";
void figure___Segment___init(val_t p0, val_t p1, int* init_table);
typedef void (*figure___Segment___init_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_Segment_figure___Segment___init(val_t p0);
static const char * const LOCATE_figure___Segment___aire = "figure::Segment::(figure::Figure::aire)";
val_t figure___Segment___aire(val_t p0);
typedef val_t (*figure___Segment___aire_t)(val_t p0);
static const char * const LOCATE_figure___Segment___perimetre = "figure::Segment::(figure::Figure::perimetre)";
val_t figure___Segment___perimetre(val_t p0);
typedef val_t (*figure___Segment___perimetre_t)(val_t p0);
static const char * const LOCATE_figure___Segment_____eqeq = "figure::Segment::(kernel::Object::==)";
val_t figure___Segment_____eqeq(val_t p0, val_t p1);
typedef val_t (*figure___Segment_____eqeq_t)(val_t p0, val_t p1);
static const char * const LOCATE_figure___Segment___taille = "figure::Segment::taille";
val_t figure___Segment___taille(val_t p0);
typedef val_t (*figure___Segment___taille_t)(val_t p0);
static const char * const LOCATE_figure___Segment___milieu = "figure::Segment::milieu";
val_t figure___Segment___milieu(val_t p0);
typedef val_t (*figure___Segment___milieu_t)(val_t p0);
static const char * const LOCATE_figure___Segment___to_s = "figure::Segment::(string::Object::to_s)";
val_t figure___Segment___to_s(val_t p0);
typedef val_t (*figure___Segment___to_s_t)(val_t p0);
static const char * const LOCATE_figure___Cercle___centre = "figure::Cercle::centre";
val_t figure___Cercle___centre(val_t p0);
typedef val_t (*figure___Cercle___centre_t)(val_t p0);
static const char * const LOCATE_figure___Cercle___rayon = "figure::Cercle::rayon";
val_t figure___Cercle___rayon(val_t p0);
typedef val_t (*figure___Cercle___rayon_t)(val_t p0);
static const char * const LOCATE_figure___Cercle___init = "figure::Cercle::init";
void figure___Cercle___init(val_t p0, val_t p1, val_t p2, int* init_table);
typedef void (*figure___Cercle___init_t)(val_t p0, val_t p1, val_t p2, int* init_table);
val_t NEW_Cercle_figure___Cercle___init(val_t p0, val_t p1);
static const char * const LOCATE_figure___Cercle___aire = "figure::Cercle::(figure::Figure::aire)";
val_t figure___Cercle___aire(val_t p0);
typedef val_t (*figure___Cercle___aire_t)(val_t p0);
static const char * const LOCATE_figure___Cercle___perimetre = "figure::Cercle::(figure::Figure::perimetre)";
val_t figure___Cercle___perimetre(val_t p0);
typedef val_t (*figure___Cercle___perimetre_t)(val_t p0);
static const char * const LOCATE_figure___Cercle_____eqeq = "figure::Cercle::(kernel::Object::==)";
val_t figure___Cercle_____eqeq(val_t p0, val_t p1);
typedef val_t (*figure___Cercle_____eqeq_t)(val_t p0, val_t p1);
static const char * const LOCATE_figure___Cercle___to_s = "figure::Cercle::(string::Object::to_s)";
val_t figure___Cercle___to_s(val_t p0);
typedef val_t (*figure___Cercle___to_s_t)(val_t p0);
#endif
